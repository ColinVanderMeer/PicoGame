// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------- //
// sound_i2s_8bits //
// --------------- //

#define sound_i2s_8bits_wrap_target 0
#define sound_i2s_8bits_wrap 7
#define sound_i2s_8bits_pio_version 0

static const uint16_t sound_i2s_8bits_program_instructions[] = {
            //     .wrap_target
    0xe826, //  0: set    x, 6            side 1     
    0x6001, //  1: out    pins, 1         side 0     
    0x0841, //  2: jmp    x--, 1          side 1     
    0x7001, //  3: out    pins, 1         side 2     
    0xf826, //  4: set    x, 6            side 3     
    0x7001, //  5: out    pins, 1         side 2     
    0x1845, //  6: jmp    x--, 5          side 3     
    0x6001, //  7: out    pins, 1         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sound_i2s_8bits_program = {
    .instructions = sound_i2s_8bits_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sound_i2s_8bits_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sound_i2s_8bits_wrap_target, offset + sound_i2s_8bits_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void sound_i2s_8bits_program_init(PIO pio, uint sm, uint offset, uint sample_rate, uint data_pin, uint clock_pin_base) {
  // configure PIO pins
  uint pin_mask = (1u << data_pin) | (0b11 << clock_pin_base);
  uint pin_dirs = (1u << data_pin) | (0b11 << clock_pin_base);
  pio_sm_set_pindirs_with_mask(pio, sm, pin_dirs, pin_mask);
  pio_gpio_init(pio, data_pin);
  pio_gpio_init(pio, clock_pin_base);      // SCK
  pio_gpio_init(pio, clock_pin_base + 1);  // WS
  // configure PIO
  pio_sm_config sm_config = sound_i2s_8bits_program_get_default_config(offset);
  sm_config_set_out_pins(&sm_config, data_pin, 1);
  sm_config_set_sideset_pins(&sm_config, clock_pin_base);
  sm_config_set_out_shift(&sm_config, false, true, 0);
  sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);
  uint f_clk_sys = frequency_count_khz(CLOCKS_FC0_SRC_VALUE_CLK_SYS);
  sm_config_set_clkdiv(&sm_config, (f_clk_sys * 1000.f) / (sample_rate * 32 * 2.0f));  // 32 bits * 2 (clock signal goes high/low every bit)
  pio_sm_init(pio, sm, offset, &sm_config);
}

#endif

